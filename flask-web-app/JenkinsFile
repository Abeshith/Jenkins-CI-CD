pipeline {
  agent {
    docker {
      image 'python:3.9-slim'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    DOCKER_IMAGE = "abeshith/flask-web-app:${BUILD_NUMBER}"
    SONAR_URL = "http://<SONAR_HOST>:9000" // Replace with your SonarQube IP
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Install Dependencies') {
      steps {
        sh 'pip install flask'
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            apt-get update && \
            apt-get install -y unzip wget openjdk-17-jre && \
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip && \
            unzip sonar-scanner-cli-5.0.1.3006-linux.zip && \
            mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner && \
            export PATH=$PATH:/opt/sonar-scanner/bin && \
            sonar-scanner \
              -Dsonar.projectKey=flask-app \
              -Dsonar.sources=. \
              -Dsonar.host.url=${SONAR_URL} \
              -Dsonar.login=$SONAR_AUTH_TOKEN
          '''
        }
      }
    }

    stage('Docker Build & Push') {
      steps {
        script {
          sh 'docker build -t ${DOCKER_IMAGE} .'
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            docker.image("${DOCKER_IMAGE}").push()
          }
        }
      }
    }

    stage('Update Deployment Manifest') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "abheshith7@gmail.com"
            git config user.name "Abeshith"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" k8s/deployment.yaml
            git add k8s/deployment.yaml
            git commit -m "Updated image tag to ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/Abeshith/your-repo-name HEAD:main
          '''
        }
      }
    }

    stage('Deploy with Argo CD') {
      steps {
        withCredentials([string(credentialsId: 'argocd-token', variable: 'ARGO_TOKEN')]) {
          sh '''
            curl -X POST http://<ARGOCD_HOST>/api/v1/applications/flask-app/sync \
              -H "Authorization: Bearer $ARGO_TOKEN" \
              -H "Content-Type: application/json"
          '''
        }
      }
    }
  }
}
